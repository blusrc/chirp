import { type NextPage } from "next";

import { SignInButton, useUser, SignOutButton } from "@clerk/nextjs";

import { api } from "~/utils/api";

import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { useState } from "react";
import { toast } from "react-hot-toast";
import { PageLayout } from "~/components/pageLayout";
import { PostView } from "~/components/postView";

import Head from "next/head";
import Image from "next/image";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput] = useState("");

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.posts.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;

      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error("Generic error");
      }
    },
  });

  if (!user) return null;

  return (
    <div className="flex grow gap-4">
      <Image
        src={user.profileImageUrl}
        alt="profile image"
        className="h-12 w-12 rounded-full border border-slate-600"
        width={56}
        height={56}
      />

      <input
        type="text"
        placeholder="Type some emojis"
        className="grow bg-transparent px-2"
        value={input}
        onChange={(e) => setInput(e.target.value)}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            if (input !== "") {
              mutate({
                content: input,
              });
            }
          }
        }}
        disabled={isPosting}
      />
      {input !== "" && !isPosting && (
        <button onClick={() => mutate({ content: input })}>Chirp</button>
      )}
      {isPosting && (
        <div className="flex items-center justify-center">
          <LoadingSpinner />
        </div>
      )}
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn } = useUser();

  api.posts.getAll.useQuery();

  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Chirp | Feed</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageLayout>
        <div className="border-b border-slate-400 p-4">
          {!isSignedIn && (
            <SignInButton mode="modal">
              <button className="rounded bg-slate-500 py-2 px-4 text-slate-100">
                Sign in
              </button>
            </SignInButton>
          )}
          {!!isSignedIn && (
            <div className="flex justify-between gap-4">
              <SignOutButton>
                <button className="rounded bg-slate-500 py-2 px-4 text-slate-100">
                  Sign out
                </button>
              </SignOutButton>
              <CreatePostWizard />
            </div>
          )}
        </div>

        <Feed />
      </PageLayout>
    </>
  );
};

export default Home;
